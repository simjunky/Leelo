var documenterSearchIndex = {"docs":
[{"location":"manual/#Manual","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"The following sections will guide you through the Installation process, how to Run the Model, how to create Custom Scenarios and about the built-in Visualization.","category":"page"},{"location":"manual/#Installation","page":"Manual","title":"Installation","text":"","category":"section"},{"location":"manual/#Prerequisites","page":"Manual","title":"Prerequisites","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"The Leelo.jl package uses JuMP.jl to build the mathematical model and IBM's CPLEX to solve said model's optimization problem. The CPLEX API is managed by the CPLEX.jl package. While JuMP.jl is solver independent, i.e. any supported solver can be chosen, CPLEX.jl requires IBM's CPLEX to be installed before installing it and adding it to the project.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"To install IBM速 ILOG速 CPLEX速 Optimization Studio follow the steps on their website. CPLEX is free for academia. After installation the CPLEX_STUDIO_BINARIES environment variable has to be set to the installation location, as shown below.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"ENV[\"CPLEX_STUDIO_BINARIES\"] = \"C:\\\\Program Files\\\\CPLEX_Studio1210\\\\cplex\\\\bin\\\\x86-64_win\\\\\"","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"info: Info\nYour path may differ, check your CPLEX installation directory.","category":"page"},{"location":"manual/#The-Leelo.jl-Package","page":"Manual","title":"The Leelo.jl Package","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"The first step to using Leelo.jl is to get the package and it's dependencies installed. Since it is not registered in the Julia General Registry, it needs to be added as unregistered package. This is done by adding it via the specific github repository URL.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"using Pkg\r\nPkg.add(\"https://github.com/simjunky/Leelo\")","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Alternatively, especially if you want to make modifications to the model's code, instead of just the computed scenarios, you can just use git to clone the github repository to your PC. When doing so, to then use the packages functions, you need to use activate to switch from the standard Julia environment to the packages one. In the REPL navigate to the cloned directory, then use:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"using Pkg\r\nPkg.activate(\".\")","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"From here on out, no matter which method you chose, you should be able to use Leelo.jl's functions as usual via:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"using Leelo","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"The following Run the Model section gives an overview on how to run a simulation model. The Documentation gives a detailed overview of all provided functions.","category":"page"},{"location":"manual/#Run-the-Model","page":"Manual","title":"Run the Model","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"The run_sim function is the main way to run a simulation. For each step of the simulation it automatically calls the associated functions:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"It reads the input files and creates a ModelData data structure, which holds all needed parameters.\nFor each benchmark year of the simulation, it:\ncreates a new JuMP.Model and links it to the CPLEX optimizer.\nadds model variables using JuMP.jl's @variable macro.\nadds model constraints using JuMP.jl's @constraint macro.\ndefines the model's objective function.\ncalculates an optimal solution.\nstores the results by writing them to a HDF5 file.\ntransitions the model parameters to the next year\nAfter all benchmark years have been calculated it visualizes some predefined aspects of the result.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"To specify which scenario to run, the directory name <dir_name> containing all scenario related files can be passed to the run_sim function.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"run_sim(scenario_dir = \"<dir_name>\")","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"The scenario_dir argument defaults to the test directory, which may not be present at your current working directory.\nThe <dir_name> directory must have the sub-directory <dir_name>/input_data, where all the input files must be located. Exemplary input files, which can be modified, can be cloned or downloaded from the package's github, with more info in Custom Scenarios.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"The second optional argument of run_sim is config. It defaults to SingleObjectiveBasicConfig, which means the created model will only have the basic constraints. To add multi-service constrains, e.g. power reserves, to the model the SingleObjectiveMultiServiceConfig can be used.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"run_sim(config = SingleObjectiveMultiServiceConfig())","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"The results are stored in a HDF5 file in the <dir_name>/output_data sub-directory. To view the data, use HDF速View. The values of a benchmark years variables are stored in a sub-group within the HDF5 file. \nTo create your own data evaluation, the HDF5.jl package can be used. To open the file use h5open, [] for specifiing the sub group  and read to access the data within the variables.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"using HDF5\r\nfile = h5open(\"<file_dir>/<file_name>.h5\", \"r\")\r\nvar = read(file[\"parameters\"], \"interest_rate\")\r\nclose(file)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Here, the variable interest_rate was read from the parametes sub-group and copied to the variable var. Always remember to close the file using close, when done.","category":"page"},{"location":"manual/#Custom-Scenarios","page":"Manual","title":"Custom Scenarios","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"The real use of Leelo.jl is to create your own energy system scenarios.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"To do this use the exemplary input files from the package's github as a starting ground. These are the files:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"scenario_setting.xlsx contains scenatio dimension such as number of nodes, timsteps and the years of the planning horizon.\ndemand_profiles.xlsx contains the power demand for each timestep and node\ntransmission_lines.xlsx contains the power lines connecting the nodes.\nconventional_generators.xlsx contains all fossil fuel dependent power generation technologies.\nrenewable_generators.xlsx contains all renewable power generation technologies. They differ compared to the conventional generators by having an associated time dependent generation profile.\nrenewable_profiles.xlsx contains these generation profiles for each renwable technology for each node and timestep.\nhydro_run_of_river.xlsx contains the different river-based hydro power plants. These also have generation profiles depending on water availability.\nhydro_run_of_river_profiles.xlsx contains these generation profiles for all river hydro power plants.\nhydro_cascades.xlsx contain all reservoir-based hydro power plants and their interconnectivity. They depend on inflow profiles to their reservoirs.\nhydro_cascades_profiles.xlsx contains the inflow profiles for hydro power reservoirs.\nstorage_technologies.xlsx contains the different available storages and their storage medium.\nconversion_technologies.xlsx contains the available converters to store and recuperate power. With the help of these, more complex technologies, such as concentrated solar power can be modeled.\nCSP_profiles.clsx contains the generation profiles for concentrated solar power plants.\npreexisting_capacities.xlsx contains the already existing power capacity of each technology in each bus.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Each file contains parameters or generation profiles for the possible technologies. To add a certain technology, simply add a row to the respective file and  fill out all cells of the table. Keep in mind that there needs to be an empty row after the last entry. \nFor some technologies, such as in conventional_generators.xlsx no further information is needed. For others, that depend on some generation profile, such as renewable_generators.xlsx, also data must be added in the connected renewable_profiles.xlsx file. All technologies require some power capacity to be added to preexisting_capacities.xlsx (it ca be zero).","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"To use your now generated scenario files, put them all into the <dir_name>/input_data sub directory of your scenario directory.","category":"page"},{"location":"manual/#Visualization","page":"Manual","title":"Visualization","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"The create_plots function runs all defined visualization functions. Its optional arguments are the scenario directory, and the filename of the HDF5 for the case it deviates from the default model_results.h5. This file must be in the <dir_name>/output_data sub-directory to be found.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"create_plots(scenario_dir = \"<dir_name>\", file_name = \"<file_name>.h5\")","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"All the created plots are saved as PDF file in the <dir_name>/plots sub-directory.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"If only one specific plot is of interest, then instead of the create_plots function, all visualization functions can be called directly. All of them are listed in the Documentation and are named with a plot_-prefix by convention. \nThese functions require an opened HDF5 file and the plot target directory as arguments. Therefore, the HDF5 result file needs to be opened first to call these functions. This is done using the HDF5.jl package.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"using HDF5\r\n\r\n# \"r\" opens the file in read-only mode\r\nfile = h5open(\"<dir_name>/output_data/<file_name>.h5\", \"r\")\r\n\r\ntarget_dir = \"<dir_name>/plots\"\r\n\r\n# e.g. if you are interested in the total system cost\r\nplot_total_cost(file, target_dir)\r\n\r\nclose(file)","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"It should be noted, that after opening the file using h5open it should always be closed using close.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"info: Info\nDue to the large ammount of variables, parameters and possible interesting combinations thereof, it can be, that you have to create a plotting function yourself. \nPlease feel free to add it to Leelo.jl and the create_plots function. Reference to the existing functions as a style guide.","category":"page"},{"location":"#Home","page":"Home","title":"Home","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Leelo stands for Long-term Energy Expansion Linear Optimization. It is an energy expansion planning tool.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Leelo.jl package provides the functionality to create models of energy systems. Using linear optimization an optimal solution for power generation and power capacity expansion for a given demand profile is calculated.","category":"page"},{"location":"#Documentation-Overview","page":"Home","title":"Documentation Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This documentation is structured into two main parts:","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Manual section provides all information needed to use Leelo.jl. It guides through the first installation and shows how to create and run custom scenarios.\nThe Documentation is the technical documentation of all functions provided by the package.","category":"page"},{"location":"documentation/#Documentation","page":"Documentation","title":"Documentation","text":"","category":"section"},{"location":"documentation/","page":"Documentation","title":"Documentation","text":"To get an introduction into how to use Leelo.jl, refer to the Manual section.","category":"page"},{"location":"documentation/","page":"Documentation","title":"Documentation","text":"run_sim\r\nModelData\r\nread_model_parameters\r\nAbstrConfiguration\r\nbuild_base_model\r\nadd_model_variables\r\nadd_model_constraints\r\nadd_single_objective_constraints\r\nadd_multi_service_constraints\r\nadd_model_objective\r\nwrite_variables\r\ndata_transition\r\nwrite_parameters\r\ncreate_plots","category":"page"},{"location":"documentation/#Leelo.run_sim","page":"Documentation","title":"Leelo.run_sim","text":"run_sim(; config::AbstrConfiguration = SingleObjectiveBasicConfig(), scenario_dir::String = \"data/TestScenario/input_data/\")\n\nThis function runs the entire simulation and plotting procedure depending on a given configuration config and the scenario specified by scenario_dir.\n\nShort Procedure Description\n\nParameter data is read from the input files in the scenario input_data directory. Then, for every benchmark year of the simulation, a new JuMP model is built (build_base_model), populated with variables (add_model_variables), constraints (add_model_constraints) and an objective (add_model_objective) and then run (optimize!). The result from the optimization is saved (write_variables) and lastly the parameters prepared for the next benchmark year (data_transition). After the final year the final parameters are saved together with the yearly optimization results (write_parameters). Lastly, plots are created from the saved data (create_plots).\n\nArguments\n\nconfig is the configuration specifying what the optimization objective is.\n\nscenario_dir is the relative path to the chosen scenarios directory. This directory must contain the scenario's parameter files inside an input_data sub-directory.\n\n\n\n\n\n","category":"function"},{"location":"documentation/#Leelo.ModelData","page":"Documentation","title":"Leelo.ModelData","text":"ModelData\n\nThe ModelData data structure contains all parameters needed by Leelo.\n\nFields\n\ninterest_rate is the interest rate at which money can be borrowed. It is a scalar and unitless.\n\n...\n\ncostCapG[g, y] is the capital cost of the conventional power plant g's installation in year y. 2-dimensional: [g, y] in [k Dollar per installed MW]\n\nor (g, y) Capital cost of power plant g's installation in year y [k Dollar per installed MW] costCapG::Array{Float64, 2} ?\n\n\n\n\n\n","category":"type"},{"location":"documentation/#Leelo.read_model_parameters","page":"Documentation","title":"Leelo.read_model_parameters","text":"read_model_parameters(; scenario_dir::String = \"data/TestScenario\")::ModelData\n\nThis function reads all input files and writes the parameter data into a ModelData data structure.\n\nArguments\n\nscenario_dir is a String containing the relative path to the chosen scenarios directory. The input files must be inside a input_data sub-directory and named as specified below.\n\nPredefined Input File Names\n\nThe input files must be inside a input_data sub-directory and named as specified below. Two examples are at data/Chile-Madhura and data/TestScenario. The latter one being drastically reduced in size.\n\nscenario_settings.xlsx contains basic information like the numer and resolution of timesteps, or number of nodes, as well as general model parameters e.g. regarding carbon tax or interest rate.\n\nconventional generators.xlsx contains all parameters regarding carbon emitting conventional generators, i.e. coal and gas. Parameter examples are the capital cost of installing and operating these power plants as well as their emissions.\n\n'conversion_technologies.xlsx' contain all parameters regarding conversion technologies, which convert power into resources or the other way round. These can include chargers for batteries, water pumps for pumped hydro power, electrolyzers for hydrogen production and many more depending on the model. Parameter examples are their in- and output resources, operating costs and efficiencies.\n\nCSP_profiles.xlsx contains the factor of usable concentrated solar power for each timestep, assuming fixed mirrors. It is separate from the regular solar power tracking because there single axis tracking is assumed.\n\ndemand_profiles contains the power demand in every timestep of ervery node and year.\n\nhydro_cascades.xlsx contains the existing hydro power plants, their location and interconnectivity. Other parameters include reservoir size, losses and conversion efficiencies and more.\n\nhydro_cascades_profiles.xlsx contains the water inflow into each hydro power reservoir for each timestep.\n\nhydro_run_of_river.xlsx contains the lumped run-of-river hydropower plants for each node.\n\nhydro_run_of_river_profiles.xlsx contains the factor of usable installed river hydro power capacity for each timestep.\n\npreexisting_capacities.xlsx contains the already existing and projected power capacities for every power source (conventional, renewable, etc.) for every node and year.\n\nrenewable_generators.xlsx contains all parameters regarding renewable power plants, like solar and wind.\n\nrenwable_profiles.xlsx contains the factor of usable power for every renewable generator for every timestep in every node.\n\nstorage_technologies.xlsx contains all parameters regarding different storage technologies, e.g. Li-ion-batteries\n\ntransmission_lines.xlsx contains all node-connecting power lines of the model, which nodes they connect, as well as their size, lengths, costs, losses and more.\n\n\n\n\n\n","category":"function"},{"location":"documentation/#Leelo.build_base_model","page":"Documentation","title":"Leelo.build_base_model","text":"build_base_model()::JuMP.Model\n\nThis function creates an empty JuMP.Model using the CPLEX optimizer. It also sets some optimizer parameters, e.g. convergence tolerance.\n\n\n\n\n\n","category":"function"},{"location":"documentation/#Leelo.add_model_variables","page":"Documentation","title":"Leelo.add_model_variables","text":"add_model_variables(model::JuMP.Model, config::AbstrConfiguration, data::ModelData, i_current_year::Int64)\n\nTODO: docstring of this function\n\n... right now just all variables independent of actual config...\n\nArguments\n\n\n\n\n\n","category":"function"},{"location":"documentation/#Leelo.add_model_constraints","page":"Documentation","title":"Leelo.add_model_constraints","text":"add_model_constraints(model::JuMP.Model, config::SingleObjectiveBasicConfig, data::ModelData, i_current_year::Int64)\n\nTODO\n\nArguments\n\n\n\n\n\nadd_model_constraints(model::JuMP.Model, config::SingleObjectiveMultiServiceConfig, data::ModelData, i_current_year::Int64)\n\nTODO\n\nArguments\n\n\n\n\n\n","category":"function"},{"location":"documentation/#Leelo.add_single_objective_constraints","page":"Documentation","title":"Leelo.add_single_objective_constraints","text":"add_single_objective_constraints(model::JuMP.Model, data::ModelData, i_current_year::Int64)\n\nThis is currently the function called to add constraints to the model for the computation for one given year.\n\nArguments\n\n\n\n\n\n","category":"function"},{"location":"documentation/#Leelo.add_multi_service_constraints","page":"Documentation","title":"Leelo.add_multi_service_constraints","text":"add_multi_service_constraints(model::JuMP.Model, data::ModelData, i_current_year::Int64)\n\nTODO\n\nArguments\n\n\n\n\n\n","category":"function"},{"location":"documentation/#Leelo.add_model_objective","page":"Documentation","title":"Leelo.add_model_objective","text":"add_model_objective(model::JuMP.Model, config::AbstrConfiguration)\n\nTODO\n\nArguments\n\n\n\n\n\n","category":"function"},{"location":"documentation/#Leelo.write_variables","page":"Documentation","title":"Leelo.write_variables","text":"write_variables(model::JuMP.Model, data::ModelData, i_current_year::Int64; scenario_dir::String = \"data/TestScenario\", file_name::String = \"model_results.h5\")\n\nThis function writes the values of the models variables into a HDF5 file, after they have been set by the optimization.\n\nArguments\n\nmodel is the JuMP model containing all constraints and variables of the current year. For this function to be called, the optimize!() function has to already been called, such that the model variables have values accessible by the value() function.\n\ndata is the data structure containing all the parameters of the model and of the type ModelData.\n\ni_current_year is the index of the current year in data.years.\n\nscenario_dir is a String containing the relative path to the chosen scenarios directory. The written output file will be inside a output_data sub-directory.\n\nfile_name is the name of the created file. It defaults to model_results.h5.\n\n\n\n\n\n","category":"function"},{"location":"documentation/#Leelo.data_transition","page":"Documentation","title":"Leelo.data_transition","text":"data_transition(model::JuMP.Model, config::AbstrConfiguration, data::ModelData, i_current_year::Int64)\n\nThis is the function called to transition the data from one year to the next to prepare the next simulation. It updates existing capacities and phase outs.\n\nArguments\n\nmodel is the JuMP model containing all constraints and variables of the current year. For this function to be called, the optimize!() function has to already been called, such that the model variables have values accessible by the value() function.\n\ndata is the data structure containing all the parameters of the model and of the type ModelData.\n\ni_current_year is the index of the current year in data.years.\n\n\n\n\n\n","category":"function"},{"location":"documentation/#Leelo.write_parameters","page":"Documentation","title":"Leelo.write_parameters","text":"function write_parameters(data::ModelData; scenario_dir::String = \"data/TestScenario\", file_name::String = \"model_results.h5\")\n\nThis function writes selected model parameters into a HDF5 file. Currently only existing capacities are saved. This function should only be called after the simulation of every benchmark year has terminated, such that all parameters are up to date.\n\nArguments\n\ndata is the data structure containing all the parameters of the model and is of the type ModelData.\n\nscenario_dir is a String containing the relative path to the chosen scenarios directory. The written output file will be inside a output_data sub-directory.\n\nfile_name is the name of the created file. It defaults to model_results.h5.\n\n\n\n\n\n","category":"function"},{"location":"documentation/#Leelo.create_plots","page":"Documentation","title":"Leelo.create_plots","text":"create_plots(; scenario_dir::String = \"data/TestScenario\", file_name::String = \"model_results.h5\")\n\nThis function creates plots of the simulation results by calling all individual plot functions. All plots are saved as PDF into the plots sub-directory. This function sets the general theme of the individual plots.\n\nArguments\n\nscenario_dir is a String containing the relative path to the chosen scenarios directory. The HDF5 file must be inside a output_data sub-directory.\n\nfile_name is a String containing the name of HDF5 file. It defaults to model_results.h5.\n\n\n\n\n\n","category":"function"}]
}
