# TODO: rewrite docstring
# Variable creation
"""
docstring of this function

    ... right now just all variables independent of actual config...
"""
function add_model_variables(model::JuMP.Model, config::AbstrConfiguration, data::ModelData)

    # TODO: remove line when finished
    @info "add_model_variables() called"


    n_timesteps = length(data.t_hourly_timesteps_names)
    n_buses = length(data.b_busses_names)
    n_conv_generators = length(data.g_conventional_generator_names)
    n_hydro_generators = length(data.h_hydro_power_generators_names)
    n_ror_generators = length(data.ror_run_of_river_generators_names)
    n_conversion_technologies = length(data.ct_conversion_technologies_names)
    n_ren_generators = length(data.r_renewable_generator_names)
    n_lines = length(data.l_transmission_lines_names)
    n_storage_technologies = length(data.st_storage_technologies_names)
    n_impact_categories = length(data.ic_impact_categories_names)




    # TODO: find out units for all variables
    # TODO: create boundaries for most variables (e.g. many are >0)

    # POWER GENERATION

    # (t,b,g) power generated by conventional generator g during timestep t in bus b
    @variable(model, powerG[1:n_timesteps, 1:n_buses, 1:n_conv_generators])

    # (t,h) power delivered by hydro power generator h during timestep t
    @variable(model, powerH[1:n_timesteps, 1:n_hydro_generators])

    # WARNING: changed from powerPpump
    # (t,h) power consumed by hydro power plant h for pumping during timestep t
    @variable(model, powerHpump[1:n_timesteps, 1:n_hydro_generators])

    # (t,ror) power delivered by river hydro power ror during timestep t
    @variable(model, powerRoR[1:n_timesteps, 1:n_ror_generators])

    # (t,b,ct) power delivered or consumed by conversion technology ct in bus b during timestep t
    @variable(model, powerCT[1:n_timesteps, 1:n_buses, 1:n_conversion_technologies])

    # (t,b,r) power produced from renewables generator r in bus b during timestep t (equal to available profile)
    @variable(model, powerR[1:n_timesteps, 1:n_buses, 1:n_ren_generators])

    # (t,b) power unserved in bus b during timestep t
    @variable(model, powerunserved[1:n_timesteps, 1:n_buses])

    # (t,b) power spilled at bus b during timestep t
    @variable(model, powerspilled[1:n_timesteps, 1:n_buses])

    # total generated power (aux counter)
    @variable(model, TotalGeneratedPower)



    # POWER FLOWS

    # (t,b) power imported to bus b
    @variable(model, powerBimp[1:n_timesteps, 1:n_buses])

    # (t,b) power exported from bus b
    @variable(model, powerBexp[1:n_timesteps, 1:n_buses])

    # (t,l) power flow on line l (positive ie from a to b)
    @variable(model, powerLpos[1:n_timesteps, 1:n_lines])

    # (t,l) power flow on line l (negative ie from b to a)
    @variable(model, powerLneg[1:n_timesteps, 1:n_lines])

    # (t,l) power losses on line l
    @variable(model, powerLlosses[1:n_timesteps, 1:n_lines])



    # SERVICES

    #(t,b,st) autonomy offered by storage technology st
    @variable(model, autonomyST[1:n_timesteps, 1:n_buses, 1:n_storage_technologies])

    #(t,h) autonomy offered by hydro power h's reserves
    @variable(model, autonomyH[1:n_timesteps, 1:n_hydro_generators])

    # TODO: the Fuck does that even mean?
    #(t) required system reserves (operating) -considers demand\renewables\largest unit
    @variable(model, reserveOperatingReq[1:n_timesteps])

    # TODO: the fuck does this even mean?
    #(t) required system reserves (frequency) -usually largest unit (if not included in Operating)
    @variable(model, reserveFrequencyReq[1:n_timesteps])

    # (t,b,ct) offered frequency reserve by conversion tech ct in bus b during timestep t (not all tech's participate)
    @variable(model, reserveFrequencyCT[1:n_timesteps, 1:n_buses, 1:n_conversion_technologies])

    # (t,h) offered frequency reserve by hydroreservoirs h during timestep t
    @variable(model, reserveFrequencyH[1:n_timesteps, 1:n_hydro_generators])

    # (t,b,g) offered frequency reserve by conventional generator g in bus b during timestep t
    @variable(model, reserveFrequencyG[1:n_timesteps, 1:n_buses, 1:n_conv_generators])

    # (t,b,ct) offered operating reserve by discharging conversion technology ct in bus b during timestep t (only conversions to electricity)
    @variable(model, reserveOperatingCT[1:n_timesteps, 1:n_buses, 1:n_conversion_technologies])

    # (t,h) offered operating reserve by hydroreservoir h during timestep t
    @variable(model, reserveOperatingH[1:n_timesteps, 1:n_hydro_generators])

    # (t,b,g) offered operating reserve by conventional generator g in bus b during timestep t
    @variable(model, reserveOperatingG[1:n_timesteps, 1:n_buses, 1:n_conv_generators])



    # STORAGE

    # (t,b,st) energy stored by storage technology st in bus b during timestep t
    @variable(model, storedST[1:n_timesteps, 1:n_buses, 1:n_storage_technologies])

    # TODO: is this really needed?
    # (b,st) initial energy storage of storage technology st in bus b during t=1
    @variable(model, vIniST[1:n_buses, 1:n_storage_technologies])

    # TODO: is this really needed?
    # (b,st) final energy storage of storage technology st in bus b during t=end
    @variable(model, vFinST[1:n_buses, 1:n_storage_technologies])

    # (t,b,st) energy losses of storage technology st in bus b during timestep t
    @variable(model, vLossST[1:n_timesteps, 1:n_buses, 1:n_storage_technologies])



    # COAL RAMPING

    # TODO: what is the difference here? and what do they even do???
    # TODO: rename them more adequately
    # TODO: shouldnt one be enough?
    # (t,b) auxiliary variable for coal ramping
    # original name: rampsAuxCoal1
    @variable(model, rampsCoalHourly[1:n_timesteps, 1:n_buses])
    @variable(model, rampsCoalDaily[1:n_timesteps, 1:n_buses])
    #=
    # (t,b) auxiliary variable for coal ramping
    rampsAuxCoal2
    # (t,b) auxiliary variable for coal ramping
    rampsAuxCoal3
    # (t,b) auxiliary variable for coal ramping
    rampsAuxCoal4
    =#



    # CASCADING HYDROPOWER

    # (t,h) flow to turbines of hydropower generator h during timestep t
    @variable(model, qturbined[1:n_timesteps, 1:n_hydro_generators])

    # (t,h) flow of hydropower plant h to it's divertion during timestep t (non turbined flow e.g. eco flow for downstream uses)
    @variable(model, qdiverted[1:n_timesteps, 1:n_hydro_generators])

    # (t,h) flow used in reserve provision of hydropower plant h during timestep t
    @variable(model, qreserve[1:n_timesteps, 1:n_hydro_generators])

    # TODO: is this still needed?
    # (t,h) fictitious flow of hydropower plant h during timestep t for convergence and debug purposes
    @variable(model, qfictitious[1:n_timesteps, 1:n_hydro_generators])

    # (t,h) pumped flow by hydropower plant h during timestep t
    @variable(model, qpumped[1:n_timesteps, 1:n_hydro_generators])

    # (t,h) diverted flow of hydropower plant h during timestep t from upstream reservoirs
    @variable(model, qdivertedupstream[1:n_timesteps, 1:n_hydro_generators])

    # (t,h) turbined flow from upstream reservoirs of hydropower plant h during timestep t
    @variable(model, qturbinedupstream[1:n_timesteps, 1:n_hydro_generators])

    # (t,h) pumped flow from upstream reservoirs of hydropower plant h during timestep t
    @variable(model, qpumpeddownstream[1:n_timesteps, 1:n_hydro_generators])

    # (t,h) energy storage by hydropower plant h during timestep t
    @variable(model, storedH[1:n_timesteps, 1:n_hydro_generators])

    # TODO: are variables for initial and final values really needed?
    # (h) energy storage by hydropower plant h during timestep t=1
    @variable(model, vIniH[1:n_hydro_generators])

    # TODO: are variables for initial and final values really needed?
    # (h) energy storage by by hydropower plant h during timestep t=end
    @variable(model, vFinH[1:n_hydro_generators])

    # (t,h) energy losses by hydropower plant h during timestep t
    @variable(model, vLossH[1:n_timesteps, 1:n_hydro_generators])



    # INVESTMENT

    # (b,r) built renewables in bus b in [GW]
    @variable(model, pR[1:n_buses, 1:n_ren_generators])

    # (b,g) built generators in bus b in [GW]
    @variable(model, pG[1:n_buses, 1:n_conv_generators])

    # (l) built capacity of transmission line l
    @variable(model, pL[1:n_lines])

    # (b,ct) built storage converters
    @variable(model, pCT[1:n_buses, 1:n_conversion_technologies])

    # (b,st) built storage energy capacity
    @variable(model, eST[1:n_buses, 1:n_storage_technologies])

    # (h) new(added) capacity of hydropower plants
    @variable(model, pH[1:n_hydro_generators])



    # PARTS OF OBJECTIVE FUNCTION

    # TODO: check if Z is even needed
    # total objective function
    @variable(model, Z)

    # operational cost renewables (variable)
    @variable(model, OCr)

    # operational cost generators (variable)
    @variable(model, OCg)

    # operational cost storage
    @variable(model, OCs)

    # operational cost lines
    @variable(model, OCl)

    # operational cost others
    @variable(model, OCo)

    # operational costs fixed storage
    @variable(model, OCfs)

    # operational costs fixed others
    @variable(model, OCfo)

    # operational cost total
    @variable(model, OCt)

    # investment cost renewables
    @variable(model, ICr)

    # investment cost generators
    @variable(model, ICg)

    # investment cost storage
    @variable(model, ICs)

    # investment cost lines
    @variable(model, ICl)

    # investment cost others
    @variable(model, ICo)

    # investment cost total
    @variable(model, ICt)

    # investment cost added hydropower(turbines)
    @variable(model, ICh)

    # GHG from renewables (kg per MWh or tons per GWh)
    @variable(model, GHGr)

    # GHG from generators ror and hydropower
    @variable(model, GHGo)

    # GHG from storage tech
    @variable(model, GHGst)

    # GHG from conversion tech
    @variable(model, GHGct)

    # Total GHG of operation (taxable)(kg of CO2)
    @variable(model, GHGoperation)

    # total Greenhouse gases (kg of CO2)
    @variable(model, TGHG)

    # tax incurred from GHG emissions (euros)
    @variable(model, CostGHG)

    # total costs
    @variable(model, TCosts)

    # total transmission
    @variable(model, TTransmission)



    # MULTIOBJECTIVE WITH LCA

    # (ic) total operation LCA from all capacities
    @variable(model, OpTLCA[1:n_impact_categories])

    # (ic) total constrcution LCA from all new capacitites
    @variable(model, ConTLCA[1:n_impact_categories])

    # (ic) total LCA from operation and capacities
    @variable(model, TotalLCA[1:n_impact_categories])

    # current subobjective (needed for pay-off table calculation)
    @variable(model, Zx)




# TODO: add positive variables and bounds from GAMS

    return
end
